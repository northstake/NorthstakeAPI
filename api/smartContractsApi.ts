/**
 * Northstake
 * Northstake api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ErrorResponse } from '../model/errorResponse';
import { GetSmartContractMEVRewards200Response } from '../model/getSmartContractMEVRewards200Response';
import { GetSmartContractMinedBlocks200Response } from '../model/getSmartContractMinedBlocks200Response';
import { GetSmartContractTransactions200Response } from '../model/getSmartContractTransactions200Response';
import { SmartContractDetailed } from '../model/smartContractDetailed';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth, JWTAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.northstake.dk/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SmartContractsApiApiKeys {
    ApiKeyAuth,
}


// If vendorExtensions.x-packageParams is true, use a single object to pass parameters
export interface SmartContractsApiParams {
    contractAddress: string;
    page?: number;
    limit?: number;
    startDate?: Date;
    endDate?: Date;
}
// If vendorExtensions.x-packageParams is true, use a single object to pass parameters
export interface SmartContractsApiParams {
    contractAddress: string;
    page?: number;
    limit?: number;
    startDate?: Date;
    endDate?: Date;
}
// If vendorExtensions.x-packageParams is true, use a single object to pass parameters
export interface SmartContractsApiParams {
    contractAddress: string;
    startDate?: Date;
    endDate?: Date;
    page?: number;
    limit?: number;
}

export class SmartContractsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new JWTAuth('your_api_key', 'your_private_key'),
        'bearerTokenAuth': new HttpBearerAuth(),
        'ApiKeyAuth': new ApiKeyAuth('header', 'x-api-key'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: SmartContractsApiApiKeys, value: string) {
        (this.authentications as any)[SmartContractsApiApiKeys[key]].apiKey = value;
    }

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.bearerTokenAuth.accessToken = accessToken;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 
     * @summary Get MEV rewards related to a specific smart contract
     * @param contractAddress The address of the smart contract
     * @param page Page number for pagination
     * @param limit Number of MEV rewards per page
     * @param startDate Start date for filtering MEV rewards
     * @param endDate End date for filtering MEV rewards
     */

   



    public async getSmartContractMEVRewards(params?: SmartContractsApiParams, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ body: GetSmartContractMEVRewards200Response, status: number }> {

        const localVarPath = this.basePath + '/smartContracts/{contractAddress}/MEVRewards'
            .replace('{' + 'contractAddress' + '}', encodeURIComponent(String(params?.contractAddress)));
       
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};


        // Verify required parameter 'contractAddress' is not null or undefined
        if (params?.contractAddress === null || params?.contractAddress === undefined) {
            throw new Error('Required parameter "contractAddress" was null or undefined when calling getSmartContractMEVRewards.');
        }



    if (params?.page !== undefined) {
        localVarQueryParameters['page'] = ObjectSerializer.serialize(params?.page, "number");
    }
    if (params?.limit !== undefined) {
        localVarQueryParameters['limit'] = ObjectSerializer.serialize(params?.limit, "number");
    }
    if (params?.startDate !== undefined) {
        localVarQueryParameters['start_date'] = ObjectSerializer.serialize(params?.startDate, "Date");
    }
    if (params?.endDate !== undefined) {
        localVarQueryParameters['end_date'] = ObjectSerializer.serialize(params?.endDate, "Date");
    }




        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;



        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
                 return new Promise<{ body: GetSmartContractMEVRewards200Response, status: number }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    console.error('API call error:', error);
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        body = ObjectSerializer.deserialize(body, "GetSmartContractMEVRewards200Response");
                        resolve({ body: body, status: response.statusCode });
                    } else {
                        console.error('API response error:', response.statusCode);
                        resolve({ body: body, status: response.statusCode });
                    }
                }
            });
        });
    } )
}
    /**
     * 
     * @summary Get mined blocks related to a specific smart contract
     * @param contractAddress The address of the smart contract
     * @param page Page number for pagination
     * @param limit Number of mined blocks per page
     * @param startDate Start date for filtering mined blocks
     * @param endDate End date for filtering mined blocks
     */

   



    public async getSmartContractMinedBlocks(params?: SmartContractsApiParams, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ body: GetSmartContractMinedBlocks200Response, status: number }> {

        const localVarPath = this.basePath + '/smartContracts/{contractAddress}/minedBlocks'
            .replace('{' + 'contractAddress' + '}', encodeURIComponent(String(params?.contractAddress)));
       
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};


        // Verify required parameter 'contractAddress' is not null or undefined
        if (params?.contractAddress === null || params?.contractAddress === undefined) {
            throw new Error('Required parameter "contractAddress" was null or undefined when calling getSmartContractMinedBlocks.');
        }



    if (params?.page !== undefined) {
        localVarQueryParameters['page'] = ObjectSerializer.serialize(params?.page, "number");
    }
    if (params?.limit !== undefined) {
        localVarQueryParameters['limit'] = ObjectSerializer.serialize(params?.limit, "number");
    }
    if (params?.startDate !== undefined) {
        localVarQueryParameters['start_date'] = ObjectSerializer.serialize(params?.startDate, "Date");
    }
    if (params?.endDate !== undefined) {
        localVarQueryParameters['end_date'] = ObjectSerializer.serialize(params?.endDate, "Date");
    }




        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;



        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
                 return new Promise<{ body: GetSmartContractMinedBlocks200Response, status: number }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    console.error('API call error:', error);
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        body = ObjectSerializer.deserialize(body, "GetSmartContractMinedBlocks200Response");
                        resolve({ body: body, status: response.statusCode });
                    } else {
                        console.error('API response error:', response.statusCode);
                        resolve({ body: body, status: response.statusCode });
                    }
                }
            });
        });
    } )
}
    /**
     * 
     * @summary Get transactions related to a specific smart contract
     * @param contractAddress The address of the smart contract
     * @param startDate Start date for filtering transactions
     * @param endDate End date for filtering transactions
     * @param page Page number for pagination
     * @param limit Number of transactions per page
     */

   



    public async getSmartContractTransactions(params?: SmartContractsApiParams, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ body: GetSmartContractTransactions200Response, status: number }> {

        const localVarPath = this.basePath + '/smartContracts/{contractAddress}/transactions'
            .replace('{' + 'contractAddress' + '}', encodeURIComponent(String(params?.contractAddress)));
       
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};


        // Verify required parameter 'contractAddress' is not null or undefined
        if (params?.contractAddress === null || params?.contractAddress === undefined) {
            throw new Error('Required parameter "contractAddress" was null or undefined when calling getSmartContractTransactions.');
        }



    if (params?.startDate !== undefined) {
        localVarQueryParameters['start_date'] = ObjectSerializer.serialize(params?.startDate, "Date");
    }
    if (params?.endDate !== undefined) {
        localVarQueryParameters['end_date'] = ObjectSerializer.serialize(params?.endDate, "Date");
    }
    if (params?.page !== undefined) {
        localVarQueryParameters['page'] = ObjectSerializer.serialize(params?.page, "number");
    }
    if (params?.limit !== undefined) {
        localVarQueryParameters['limit'] = ObjectSerializer.serialize(params?.limit, "number");
    }




        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;



        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
                 return new Promise<{ body: GetSmartContractTransactions200Response, status: number }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    console.error('API call error:', error);
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        body = ObjectSerializer.deserialize(body, "GetSmartContractTransactions200Response");
                        resolve({ body: body, status: response.statusCode });
                    } else {
                        console.error('API response error:', response.statusCode);
                        resolve({ body: body, status: response.statusCode });
                    }
                }
            });
        });
    } )
}
    /**
     * 
     * @summary Get list of all deployed smart contracts
     */

   



   public async getSmartContracts (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ body: Array<SmartContractDetailed>, status: number }> {

        const localVarPath = this.basePath + '/smartContracts';
       
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};









        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;



        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
                 return new Promise<{ body: Array<SmartContractDetailed>, status: number }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    console.error('API call error:', error);
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        body = ObjectSerializer.deserialize(body, "Array<SmartContractDetailed>");
                        resolve({ body: body, status: response.statusCode });
                    } else {
                        console.error('API response error:', response.statusCode);
                        resolve({ body: body, status: response.statusCode });
                    }
                }
            });
        });
    } )
}
}
